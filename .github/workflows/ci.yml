name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18, 20, 22]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: bun install

      - name: Lint code
        run: bun run lint

      - name: Format check
        run: |
          bun run format
          git diff --exit-code || (echo "Code is not properly formatted. Run 'bun run format'" && exit 1)

      - name: Type check
        run: bun run build

      - name: Check dist output
        run: |
          if [ ! -d "dist" ]; then
            echo "Build failed - dist directory not found"
            exit 1
          fi
          
          echo "Build successful! Generated files:"
          ls -la dist/

  security:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2

      - name: Install dependencies
        run: bun install

      - name: Run security audit
        run: |
          bun audit || echo "Audit completed with warnings"

      - name: Check for sensitive files
        run: |
          if grep -r "password\|secret\|api_key\|private_key" src/ --exclude-dir=node_modules || true; then
            echo "Potential sensitive data found in source code"
            echo "Please review the above matches"
          fi

  validate-package:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2

      - name: Install dependencies
        run: bun install

      - name: Build package
        run: bun run build

      - name: Pack package
        run: npm pack

      - name: Validate package contents
        run: |
          tar -tzf *.tgz | head -20
          echo "Package size:"
          ls -lh *.tgz
          
          # Check if package size is reasonable (should be < 1MB)
          SIZE=$(stat -f%z *.tgz 2>/dev/null || stat -c%s *.tgz)
          if [ $SIZE -gt 1048576 ]; then
            echo "Warning: Package size is larger than 1MB ($SIZE bytes)"
          else
            echo "Package size is reasonable: $SIZE bytes"
          fi

      - name: Test package installation
        run: |
          # Create a temporary directory for testing
          mkdir test-install
          cd test-install
          
          # Initialize a new npm project
          npm init -y
          
          # Install the packed package
          npm install ../*.tgz
          
          # Verify installation
          node -e "
            try {
              const pkg = require('@llmbase/mcp-servers');
              console.log('Package imported successfully');
              console.log('Exported items:', Object.keys(pkg));
            } catch (e) {
              console.error('Failed to import package:', e.message);
              process.exit(1);
            }
          "

  api-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test API endpoints
        run: |
          echo "Testing public API endpoints..."
          
          # Test health check endpoint
          echo "Testing health check..."
          curl -f https://mcp.llmbase.ai/ || echo "Health check endpoint not available (expected in CI)"
          
          # Validate endpoint documentation
          echo "Validating endpoint documentation..."
          if [ -f "ENDPOINTS.md" ]; then
            echo "✓ ENDPOINTS.md exists"
          else
            echo "✗ ENDPOINTS.md missing"
            exit 1
          fi
          
          if [ -f "CLAUDE.md" ]; then
            echo "✓ CLAUDE.md exists"
          else
            echo "✗ CLAUDE.md missing"
            exit 1
          fi

  documentation:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate documentation
        run: |
          echo "Validating documentation files..."
          
          # Check required files exist
          files=("README.md" "ENDPOINTS.md" "CLAUDE.md" "package.json" "wrangler.jsonc")
          for file in "${files[@]}"; do
            if [ -f "$file" ]; then
              echo "✓ $file exists"
            else
              echo "✗ $file missing"
              exit 1
            fi
          done
          
          # Check README has required sections
          sections=("Installation" "Usage" "API Reference" "Development" "License")
          for section in "${sections[@]}"; do
            if grep -q "$section" README.md; then
              echo "✓ README contains $section section"
            else
              echo "✗ README missing $section section"
              exit 1
            fi
          done
          
          echo "Documentation validation complete!"